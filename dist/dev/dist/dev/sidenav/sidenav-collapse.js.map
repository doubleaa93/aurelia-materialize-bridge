{"version":3,"sources":["sidenav/sidenav-collapse.js"],"names":["bindable","customAttribute","ObserverLocator","inject","getBooleanFromAttributeValue","getLogger","MdSidenavCollapse","Element","element","observerLocator","log","attached","ref","whenAttached","then","setAttribute","controlId","sideNavConfig","edge","mdEdge","closeOnClick","mdFixed","mdCloseOnClick","menuWidth","parseInt","mdWidth","$","sideNav","detached"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,qB,mBAAAA,e;;AACAC,Y,+BAAAA,M;;AACAC,kC,qBAAAA,4B;;AACAC,e,mBAAAA,S;;;mCAIIC,iB,WAFZL,gBAAgB,qBAAhB,C,UACAE,OAAOI,OAAP,EAAgBL,eAAhB,C,UAEEF,U;AACD,mCAAYQ,OAAZ,EAAqBC,eAArB,EAAsC;AAAA;;AAAA;;AACpC,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKC,eAAL,GAAuBA,eAAvB;AACA,eAAKC,GAAL,GAAWL,UAAU,qBAAV,CAAX;AACD;;oCAEDM,Q,uBAAW;AAAA;;AACT,eAAKC,GAAL,CAASC,YAAT,CAAsBC,IAAtB,CAA2B,YAAM;;AAI/B,kBAAKN,OAAL,CAAaO,YAAb,CAA0B,gBAA1B,EAA4C,MAAKH,GAAL,CAASI,SAArD;AACA,gBAAIC,gBAAgB;AAClBC,oBAAM,MAAKN,GAAL,CAASO,MAAT,IAAmB,MADP;AAElBC,4BAAe,MAAKR,GAAL,CAASS,OAAT,GAAmB,KAAnB,GAA2BjB,6BAA6B,MAAKQ,GAAL,CAASU,cAAtC,CAFxB;AAGlBC,yBAAWC,SAAS,MAAKZ,GAAL,CAASa,OAAlB,EAA2B,EAA3B;AAHO,aAApB;;AAMAC,cAAE,MAAKlB,OAAP,EAAgBmB,OAAhB,CAAwBV,aAAxB;AACD,WAZD;AAaD,S;;oCAEDW,Q,uBAAW,CAEV,C","file":"../../../sidenav/sidenav-collapse.js","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { ObserverLocator } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\nimport { getLogger } from 'aurelia-logging';\r\n\r\n@customAttribute('md-sidenav-collapse')\r\n@inject(Element, ObserverLocator)\r\nexport class MdSidenavCollapse {\r\n  @bindable() ref;\r\n  constructor(element, observerLocator) {\r\n    this.element = element;\r\n    this.observerLocator = observerLocator;\r\n    this.log = getLogger('md-sidenav-collapse');\r\n  }\r\n\r\n  attached() {\r\n    this.ref.whenAttached.then(() => {\r\n      // this.widthSubscription = this.observerLocator.getObserver(this.ref, 'mdWidth').subscribe(this.widthChanged.bind(this));\r\n      // this.fixedSubscription = this.observerLocator.getObserver(this.ref, 'fixed').subscribe(this.fixedChanged.bind(this));\r\n\r\n      this.element.setAttribute('data-activates', this.ref.controlId);\r\n      let sideNavConfig = {\r\n        edge: this.ref.mdEdge || 'left',\r\n        closeOnClick: (this.ref.mdFixed ? false : getBooleanFromAttributeValue(this.ref.mdCloseOnClick)),\r\n        menuWidth: parseInt(this.ref.mdWidth, 10)\r\n      };\r\n      // this.log.debug('sideNavConfig:', sideNavConfig);\r\n      $(this.element).sideNav(sideNavConfig);\r\n    });\r\n  }\r\n\r\n  detached() {\r\n    // this.widthSubscription.unsubscribe();\r\n  }\r\n\r\n  // fixedChanged() {\r\n  //   this.log.debug('fixedChanged');\r\n  //   $(this.element).sideNav({\r\n  //     edge: this.ref.edge || 'left',\r\n  //     closeOnClick: this.ref.closeOnClick,\r\n  //     menuWidth: parseInt(this.ref.mdWidth, 10)\r\n  //   });\r\n  // }\r\n  //\r\n  // widthChanged() {\r\n  //   this.log.debug('widthChanged');\r\n  //   $(this.element).sideNav({\r\n  //     edge: this.ref.edge || 'left',\r\n  //     closeOnClick: this.ref.closeOnClick,\r\n  //     menuWidth: parseInt(this.ref.mdWidth, 10)\r\n  //   });\r\n  // }\r\n}\r\n"]}
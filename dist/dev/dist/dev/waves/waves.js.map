{"version":3,"sources":["waves/waves.js"],"names":["bindable","customAttribute","bindingMode","inject","AttributeManager","getBooleanFromAttributeValue","MdWaves","Element","defaultBindingMode","oneTime","element","attributeManager","attached","classes","block","push","circle","color","addClasses","Waves","attach","detached","removeClasses"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;AACAC,kC,qBAAAA,4B;;;yBAIIC,O,WAFZL,gBAAgB,UAAhB,C,UACAE,OAAOI,OAAP,C,UAEEP,SAAS;AACRQ,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,SAAS;AACRQ,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,SAAS;AACRQ,4BAAoBN,YAAYO;AADxB,OAAT,C;AAGD,yBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,gBAAL,GAAwB,IAAIP,gBAAJ,CAAqB,KAAKM,OAA1B,CAAxB;AACD;;0BAEDE,Q,uBAAW;AACT,cAAIC,UAAU,CAAC,cAAD,CAAd;AACA,cAAIR,6BAA6B,KAAKS,KAAlC,CAAJ,EAA8C;AAC5CD,oBAAQE,IAAR,CAAa,aAAb;AACD;AACD,cAAIV,6BAA6B,KAAKW,MAAlC,CAAJ,EAA+C;AAC7CH,oBAAQE,IAAR,CAAa,cAAb;AACD;AACD,cAAI,KAAKE,KAAT,EAAgB;AACdJ,oBAAQE,IAAR,YAAsB,KAAKE,KAA3B;AACD;;AAED,eAAKN,gBAAL,CAAsBO,UAAtB,CAAiCL,OAAjC;AACAM,gBAAMC,MAAN,CAAa,KAAKV,OAAlB;AACD,S;;0BAEDW,Q,uBAAW;AACT,cAAIR,UAAU,CAAC,cAAD,EAAiB,aAAjB,CAAd;AACA,cAAI,KAAKI,KAAT,EAAgB;AACdJ,oBAAQE,IAAR,YAAsB,KAAKE,KAA3B;AACD;;AAED,eAAKN,gBAAL,CAAsBW,aAAtB,CAAoCT,OAApC;AACD,S;;;;;;iBAnCU,K;;;;;iBAGC,K","file":"../../../waves/waves.js","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\r\nimport { bindingMode } from 'aurelia-binding';\r\nimport { inject } from 'aurelia-dependency-injection';\r\nimport { AttributeManager } from '../common/attributeManager';\r\nimport { getBooleanFromAttributeValue } from '../common/attributes';\r\n\r\n@customAttribute('md-waves')\r\n@inject(Element)\r\nexport class MdWaves {\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) block = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) circle = false;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) color;\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.attributeManager = new AttributeManager(this.element);\r\n  }\r\n\r\n  attached() {\r\n    let classes = ['waves-effect'];\r\n    if (getBooleanFromAttributeValue(this.block)) {\r\n      classes.push('waves-block');\r\n    }\r\n    if (getBooleanFromAttributeValue(this.circle)) {\r\n      classes.push('waves-circle');\r\n    }\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.addClasses(classes);\r\n    Waves.attach(this.element);\r\n  }\r\n\r\n  detached() {\r\n    let classes = ['waves-effect', 'waves-block'];\r\n    if (this.color) {\r\n      classes.push(`waves-${this.color}`);\r\n    }\r\n\r\n    this.attributeManager.removeClasses(classes);\r\n  }\r\n}\r\n"]}
{"version":3,"sources":["carousel/carousel.js"],"names":["bindable","children","customElement","bindingMode","inject","TaskQueue","getBooleanFromAttributeValue","MdCarousel","Element","defaultBindingMode","oneTime","element","taskQueue","attached","mdSlider","classList","add","refresh","itemsChanged","newValue","items","length","options","full_width","indicators","mdIndicators","queueTask","$","carousel"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,c,sBAAAA,Q;AAAUC,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;;AACpBC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,e,qBAAAA,S;;AACAC,kC,qBAAAA,4B;;;4BAIKC,U,WAFZL,cAAc,aAAd,C,UACAE,OAAOI,OAAP,EAAgBH,SAAhB,C,UAEEL,U,UACAA,SAAS;AACRS,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,SAAS,kBAAT,C;AAED,4BAAYU,OAAZ,EAAqBC,SAArB,EAAgC;AAAA;;AAAA;;AAAA;;AAAA;;AAC9B,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKC,SAAL,GAAiBA,SAAjB;AACD;;6BAEDC,Q,uBAAW;AACT,cAAIP,6BAA6B,KAAKQ,QAAlC,CAAJ,EAAiD;AAC/C,iBAAKH,OAAL,CAAaI,SAAb,CAAuBC,GAAvB,CAA2B,iBAA3B;AACD;;AAQD,eAAKC,OAAL;AACD,S;;6BAEDC,Y,yBAAaC,Q,EAAU;AACrB,eAAKF,OAAL;AACD,S;;6BAEDA,O,sBAAU;AAAA;;AACR,cAAI,KAAKG,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AAAA;AACzB,kBAAIC,UAAU;AACZC,4BAAYjB,6BAA6B,MAAKQ,QAAlC,CADA;AAEZU,4BAAY,MAAKC;AAFL,eAAd;;AAKA,oBAAKb,SAAL,CAAec,SAAf,CAAyB,YAAM;AAC7BC,kBAAE,MAAKhB,OAAP,EAAgBiB,QAAhB,CAAyBN,OAAzB;AACD,eAFD;AANyB;AAS1B;AACF,S;;;;;;iBAxC0B,I;;;;;iBAGb,K;;;;;iBACwB,E","file":"../../../carousel/carousel.js","sourcesContent":["import {bindable, children, customElement} from 'aurelia-templating';\r\nimport {bindingMode} from 'aurelia-binding';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {TaskQueue} from 'aurelia-task-queue';\r\nimport {getBooleanFromAttributeValue} from '../common/attributes';\r\n\r\n@customElement('md-carousel')\r\n@inject(Element, TaskQueue)\r\nexport class MdCarousel {\r\n  @bindable() mdIndicators = true;\r\n  @bindable({\r\n    defaultBindingMode: bindingMode.oneTime\r\n  }) mdSlider = false;\r\n  @children('md-carousel-item') items = [];\r\n\r\n  constructor(element, taskQueue) {\r\n    this.element = element;\r\n    this.taskQueue = taskQueue;\r\n  }\r\n\r\n  attached() {\r\n    if (getBooleanFromAttributeValue(this.mdSlider)) {\r\n      this.element.classList.add('carousel-slider');\r\n    }\r\n\r\n    // workaround for: https://github.com/Dogfalo/materialize/issues/2741\r\n    // if (getBooleanFromAttributeValue(this.mdSlider)) {\r\n    //   $(this.element).carousel({full_width: true});\r\n    // } else {\r\n    //   $(this.element).carousel();\r\n    // }\r\n    this.refresh();\r\n  }\r\n\r\n  itemsChanged(newValue) {\r\n    this.refresh();\r\n  }\r\n\r\n  refresh() {\r\n    if (this.items.length > 0) {\r\n      let options = {\r\n        full_width: getBooleanFromAttributeValue(this.mdSlider),\r\n        indicators: this.mdIndicators\r\n      };\r\n\r\n      this.taskQueue.queueTask(() => {\r\n        $(this.element).carousel(options);\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}